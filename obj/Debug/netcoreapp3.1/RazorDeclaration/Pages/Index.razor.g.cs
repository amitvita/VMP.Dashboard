// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace VMP.Dashboard.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Repos\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Repos\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Repos\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Repos\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Repos\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Repos\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Repos\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Repos\_Imports.razor"
using VMP.Dashboard;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Repos\_Imports.razor"
using VMP.Dashboard.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Repos\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Repos\_Imports.razor"
using Syncfusion.Blazor.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Repos\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Repos\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Repos\_Imports.razor"
using Syncfusion.Blazor.Maps;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Repos\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Repos\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Repos\Pages\Index.razor"
using VMP.Dashboard.Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 7 "D:\Repos\Pages\Index.razor"
       


    public static String[] ThemeColorList = new String[] { "#816aae", "#d682b6", "#f9956b", "#fec578", "#5e8ac7", "#5ea5c7", "#50c5dd", "#5dc4b1", "#ececec" };
    public String[] RevenueOverTimepalettes = new String[] { ThemeColorList[8], ThemeColorList[1] };
    public String[] VisitOverTimepalettes = new String[] { ThemeColorList[8], ThemeColorList[0] };
    public String[] OrderOverTimepalettes = new String[] { ThemeColorList[8], ThemeColorList[2] };
    public String[] CustomerTimepalettes = new String[] { ThemeColorList[8], ThemeColorList[5], ThemeColorList[1] };

    private Theme Theme { get; set; }


    // revenue over time from db
    SqlDataAccess sda = new SqlDataAccess();

    private List<RevenueOverTime1> revenueOverTimesModel;
    private List<MyPieChartModelDb> piechartModelDb;
    private List<OrderbyPricebucket> OrderByPricebucketDb;
    private List<OrderOverTimeDb> orderOverTimeDb;
    private List<TrafficSourceDb> TrafficSourceDb;
    private List<DeviceTypeDb> DeviceTypeDb;
    private List<VisitOverTimeDb> VisiteOverTimeDb;
    private List<totalsales> TotalsalesDb;
    private List<productListed> ProductListedb;
    private List<CategoryDb> catSubCatDb;
    private List<RegionDb> regions;
    private List<SegmentDb> segments;
    private List<CustomerOverTimeDb> customerOverTimeDb;
    private List<CustomerPieDb> customerPieDb;
    private List<Top10SKUs> Top10SKUsDb;
    private List<SKUSparklineAllData> SKUSparklineData;
    private List<OrdersDb> Orders;
    private List<OrdersPerCustomerDb> ordersPerCustomers;
    private List<Customers> customers;
    private List<Top5Customers> Top5CustomersDb;
    private List<CustSparklineAllData> CustSparklineData;
    private List<VisitDb> visits;

    protected override void OnInitialized()
    {
        catSubCatDb = sda.GetCategoryDbs();
        regions = sda.GetRegions();
        segments = sda.GetSegment();
        //OnDateRangeChange(RangePickerEventArgs<DateTime?> args);

        sda.SetDate(StartDate, EndDate);

        IntializeData();

        //cs.Orders.GroupBy(x => x.Region).Select(group => new { group.Key, total = group.Sum(x => x.Sales) }).ToList();

    }


    private void IntializeData()
    {
        sda.FilterCreation(multiselectValue, regionvalues, segemntvalues,"");

        revenueOverTimesModel = sda.GetRevenueOverTimes();
        //Donut Db Chart
        piechartModelDb = sda.GetMyPieChartModels();

        OrderByPricebucketDb = sda.GetOrderbyPricebucket();

        orderOverTimeDb = sda.GetOrderOverTimes();

        TrafficSourceDb = sda.GetTrafficSource();

        DeviceTypeDb = sda.GetDeviceType();

        VisiteOverTimeDb = sda.GetVisitOverTimes();

        TotalsalesDb = sda.GetTotalsales();

        ProductListedb = sda.GetProductListedb();

        customerOverTimeDb = sda.GetCustomerOverTimes();

        customerPieDb = sda.GetCustomerspie();

        Top10SKUsDb = sda.GetTop10SKUs();

        //SKUSparklineData = sda.GetTop10SKUsSparkline();

        Orders = sda.GetOrders();

        ordersPerCustomers = sda.GetOrdersPerCustomers();

        customers = sda.GetCustomers();

        Top5CustomersDb = sda.GetTop5Customers();

        // CustSparklineData = sda.GetTop5CustSparkline();

        visits = sda.GetVisitDbs();
    }


    public string[] multiselectValue { get; set; }
    public string[] regionvalues { get; set; }
    public string[] segemntvalues { get; set; }

    public void getValues()
    {
        var value = multiselectValue;
        IntializeData();
    }

    public DateTime? StartDate { get; set; } = new DateTime(2020, 01, 01);
    public DateTime? EndDate { get; set; } = new DateTime(2020, 12, 31);
    public DateTime? PrevStartDate { get; set; } = new DateTime(2019, 01, 01);
    public DateTime? PrevEndDate { get; set; } = new DateTime(2019, 12, 31);
    public DateTime MinDate { get; set; } = new DateTime(2019, 01, 01);
    public DateTime MaxDate { get; set; } = new DateTime(2020, 12, 31);
    public DateTime lastMonthStart { get; set; } = new DateTime(2020, 11, 01);
    public DateTime lastMonthEnd { get; set; } = new DateTime(2020, 11, 30);
    public DateTime last3MonthStart { get; set; } = new DateTime(2020, 10, 01);
    public DateTime last3MonthEnd { get; set; } = new DateTime(2020, 12, 31);
    public DateTime ytdStart { get; set; } = new DateTime(2020, 01, 01);
    public DateTime ytdEnd { get; set; } = new DateTime(2020, 12, 31);
    public DateTime oneyearStart { get; set; } = new DateTime(2020, 01, 01);
    public DateTime oneyearEnd { get; set; } = new DateTime(2020, 12, 31);
    public DateTime twoyearsStart { get; set; } = new DateTime(2019, 01, 01);
    public DateTime twoyearsEnd { get; set; } = new DateTime(2020, 12, 31);
    //public DateTime allTimeStart { get; set; } = new DateTime(2019, 01, 01);
    //public DateTime allTimeEnd { get; set; } = new DateTime(2020, 12, 31);


    public void OnDateRangeChange(RangePickerEventArgs<DateTime?> args)
    {
        sda.SetDate(args.StartDate, args.EndDate);
        //StateHasChanged();
        //IntializeData();

    }

    public bool ShowSelectAllCheckBox { get; set; } = true;
    public bool EnableSelectionOrders { get; set; } = false;
    public bool EnableCheckBox { get; set; } = true;





    //Customer Pie Chart

    public class CustomerPie
    {
        public string CustomerName { get; set; }
        public double CustomerValue { get; set; }
        public string CustomerMapping { get; set; }
        public string CustomerColor { get; set; }
    }

    public List<CustomerPie> customerData = new List<CustomerPie>
{
         new CustomerPie
        {
            CustomerName = "New Customer",
            CustomerValue = 489,
            CustomerMapping = "65%",
            CustomerColor = ThemeColorList[1]
        },
        new CustomerPie
        {
            CustomerName = "Repeat Customer",
            CustomerValue = 265,
            CustomerMapping = "35%",
            CustomerColor = ThemeColorList[5]
        }
    };

    //Spakline charts
    public class Sku
    {
        public string Month { get; set; }
        public double sales { get; set; }
    }
    public List<Sku> skuData = new List<Sku>
{
        new Sku{Month="Jan",sales=500},
        new Sku{Month="Feb",sales=800},
        new Sku{Month="Mar",sales=200},
        new Sku{Month="Apr",sales=300},
        new Sku{Month="May",sales=500},
        new Sku{Month="Jun",sales=700},
        new Sku{Month="Jul",sales=900},
        new Sku{Month="Aug",sales=1100},
        new Sku{Month="Sep",sales=900},
        new Sku{Month="Oct",sales=800},
        new Sku{Month="Nov",sales=700},
        new Sku{Month="Dec",sales=500}
    };

    public class Sku2
    {
        public string Month { get; set; }
        public double sales { get; set; }
    }
    public List<Sku2> skuData2 = new List<Sku2>
{
        new Sku2{Month="Jan",sales=1500},
        new Sku2{Month="Feb",sales=1800},
        new Sku2{Month="Mar",sales=1200},
        new Sku2{Month="Apr",sales=1300},
        new Sku2{Month="May",sales=1500},
        new Sku2{Month="Jun",sales=1700},
        new Sku2{Month="Jul",sales=1900},
        new Sku2{Month="Aug",sales=1100},
        new Sku2{Month="Sep",sales=1900},
        new Sku2{Month="Oct",sales=1800},
        new Sku2{Month="Nov",sales=1700},
        new Sku2{Month="Dec",sales=1500}
    };

    public class TrafficWorld
    {
        public string Name { get; set; }
        public double View { get; set; }
    }

    public List<TrafficWorld> trafficView = new List<TrafficWorld>
{
        new TrafficWorld { Name="China" , View = 50000},
        new TrafficWorld { Name="France" , View = 40000},
        new TrafficWorld { Name="Russia" , View = 84000},
        new TrafficWorld { Name="Poland" , View = 2000},
        new TrafficWorld { Name="United States" , View = 83400},
        new TrafficWorld { Name="Australia" , View = 90000},
        new TrafficWorld { Name="Kuwait" , View = 55000},
        new TrafficWorld { Name="Peru" , View = 52450},
        new TrafficWorld { Name="Netherlands" , View = 65300}
    };


    public string[] ShapeColorOne = { ThemeColorList[0] };
    public string[] ShapeColorTwo = { ThemeColorList[1] };
    public string[] ShapeColorThree = { ThemeColorList[2] };
    public string[] ShapeColorFour = { ThemeColorList[3] };
    public string[] ShapeColorFive = { ThemeColorList[4] };

    // PURCHASED FUNNEL
    public class FunnelData
    {
        public string Purchased { get; set; }
        public int Value { get; set; }
        public string color { get; set; }
    }



    public List<FunnelData> FunnelChartPoints { get; set; } = new List<FunnelData>
{
        new FunnelData { Purchased = "Purchased", Value = 3673, color=ThemeColorList[0] },
        new FunnelData { Purchased = "Added to cart", Value = 22574, color=ThemeColorList[1] },
        new FunnelData { Purchased = "Shopped", Value = 144324, color=ThemeColorList[2] },
        new FunnelData { Purchased = "Visited", Value = 160517, color=ThemeColorList[3] },
    };

    public void TooltipRenderEvent(Syncfusion.Blazor.Charts.TooltipRenderEventArgs Args)
    {
        var text = Args.Text.Split(':');
        var pointX = text[0];
        var y = float.Parse(text[1]);
        var pointY = y.ToString("#,##0");
        Args.Text = pointX + " : $" + pointY;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
